---
import apps from "../../../public/data/apps.json";
import Layout from "../../layouts/Layout.astro";

// Generate dynamic routes
export async function getStaticPaths() {
  const paths = apps.map((app) => ({
    params: { slug: app.Name.toLowerCase().replace(/\s+/g, "-") },
    props: { app },
  }));

  return paths;
}

const { app } = Astro.props;
---

<Layout
  title=`${app.Name} - How to do automatic provisioning on ${app.Name}`
  description=`Learn how to automate provisioning and deprovisioning for ${app.Name}. Discover support for SCIM, SSO, JIT, and API-based user management. Check compatibility, requirements, and best practices for seamless onboarding and offboarding.`
>
  <img src=`https://logo.clearbit.com/${app.Domain}` alt=`${app.Name} logo` />
  <h1>{app.Name}</h1>
  <p><strong>Domain:</strong> {app.Domain}</p>
  <p><strong>Google OIDC:</strong> {app["Google OIDC"]}</p>
  <p><strong>Microsoft OIDC:</strong> {app["Microsoft OIDC"]}</p>
  <p><strong>SAML:</strong> {app.SAML}</p>
  <p><strong>JIT:</strong> {app.JIT}</p>
  <p><strong>SCIM Provisioning:</strong> {app["SCIM Provisioning"]}</p>
  <p><strong>SCIM Deprovisioning:</strong> {app["SCIM Deprovisioning"]}</p>
  <p>
    <strong>Public Provisioning API:</strong>
    {app["Public Provisioning API"]}
  </p>
  <p>
    <strong>Compatible Google SCIM:</strong>
    {app["Compatible Google SCIM"]}
  </p>

  <h2>Sources</h2>
  <ul>
    {
      app.Sources.map((source) => (
        <li>
          <a href={source} target='_blank'>
            {source}
          </a>
        </li>
      ))
    }
  </ul>
</Layout>
